{"version":3,"sources":["components/Joke.js","api/api.js","App.js","index.js"],"names":["Joke","icon_url","value","useState","isLoad","setIsLoad","useEffect","timeout","setTimeout","clearTimeout","className","src","alt","getJokes","a","jokes","i","axios","get","joke","push","data","Error","App","setJokes","loading","setLoading","makeRequest","setMakeRequest","observer","useRef","lastJokeRef","useCallback","current","disconnect","IntersectionObserver","entries","isIntersecting","m","observe","then","prevJokes","map","index","length","ref","id","type","color","height","width","render","document","getElementById"],"mappings":"kOAEaA,EAAO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAAW,EACXC,oBAAS,GADE,mBAChCC,EADgC,KACxBC,EADwB,KAavC,OATAC,qBAAU,WACN,IAAMC,EAAU,WACZF,GAAU,IAId,OAFAG,WAAWD,EAAS,KAEb,kBAAME,aAAaF,MAC5B,IAEK,0BAASG,UAAS,eAAUN,GAAU,aAAtC,UACH,qBAAKM,UAAU,aAAf,SACI,qBAAKC,IAAKV,EAAUW,IAAI,gBAE5B,qBAAKF,UAAU,cAAf,SACI,4BAAIR,U,0DClBHW,EAAQ,uCAAG,gCAAAC,EAAA,sDAChBC,EAAQ,GACJC,EAAI,EAFQ,YAELA,EAAI,IAFC,0CAIOC,IAAMC,IAAI,2CAJjB,OAINC,EAJM,OAKZJ,EAAMK,KAAKD,EAAKE,MALJ,wDAON,IAAIC,MAAJ,MAPM,QAEGN,IAFH,gDAUbD,GAVa,0DAAH,qDCkENQ,MA9Df,WAAgB,IAAD,EAEapB,mBAAS,IAFtB,mBAENY,EAFM,KAECS,EAFD,OAGiBrB,oBAAS,GAH1B,mBAGNsB,EAHM,KAGGC,EAHH,OAIyBvB,oBAAS,GAJlC,mBAINwB,EAJM,KAIOC,EAJP,KAOPC,EAAWC,mBAEXC,EAAcC,uBAAY,SAAAb,GAC3BM,IACAI,EAASI,SAASJ,EAASI,QAAQC,aACtCL,EAASI,QAAU,IAAIE,sBAAqB,SAAAC,GACvCA,EAAQ,GAAGC,iBAAmBZ,GAC/BG,GAAe,SAAAU,GAAC,OAAKA,QAGtBnB,GAAMU,EAASI,QAAQM,QAAQpB,MACjC,CAACM,IAYJ,OAVAnB,qBAAU,WAENoB,GAAW,GACXb,IAAW2B,MAAK,SAAAnB,GAAI,OAAIG,GAAS,SAAAiB,GAE/B,OADAf,GAAW,GACL,GAAN,mBAAWe,GAAX,YAAyBpB,YAE5B,CAACM,IAIF,uBAAMjB,UAAU,YAAhB,UACI,sBAAKA,UAAU,MAAf,UACE,wBAAQA,UAAU,QAAlB,SACE,sDAEDK,EAAM2B,KAAI,SAACvB,EAAMwB,GAChB,OAAG5B,EAAM6B,SAAWD,EAAQ,EACnB,qBAAmBE,IAAKd,EAAxB,SACL,cAAC,EAAD,eAAWZ,KADIA,EAAK2B,IAIf,8BACP,cAAC,EAAD,eAAW3B,KADMA,EAAK2B,UAO3BrB,GAAW,cAAC,IAAD,CACRf,UAAU,SACVqC,KAAK,YACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,UCvDnBC,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d0e3f471.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nexport const Joke = ({icon_url, value}) => {\r\n    const [isLoad, setIsLoad] = useState(false)\r\n    \r\n    //effect to add class 'show-joke' after element was render\r\n    useEffect(() => {\r\n        const timeout = () => {\r\n            setIsLoad(true)\r\n        }\r\n        setTimeout(timeout, 200)\r\n        \r\n        return () => clearTimeout(timeout)\r\n    },[])\r\n\r\n    return <section className={`joke ${isLoad && 'show-joke'}`} >\r\n        <div className='joke__icon'>\r\n            <img src={icon_url} alt='joke icon'></img>\r\n        </div>\r\n        <div className='joke__value'>\r\n            <p>{value}</p>\r\n        </div>\r\n    </section>\r\n}","import axios from 'axios'\r\n\r\nexport const getJokes = async () => {\r\n    let jokes = []\r\n    for(let i = 0; i < 10; i++){\r\n        try{\r\n            const joke = await axios.get('https://api.chucknorris.io/jokes/random')\r\n            jokes.push(joke.data)\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    }\r\n    return jokes\r\n}","import { useCallback, useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Joke } from './components/Joke';\nimport Loader from 'react-loader-spinner';\nimport { getJokes } from './api/api';\n\nfunction App() {\n  \n  const [jokes, setJokes] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [makeRequest, setMakeRequest] = useState(false)\n\n  //ref to the last array element\n  const observer = useRef()\n  //add observer to the last el of array\n  const lastJokeRef = useCallback(joke => {\n    if(loading) return\n    if(observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if(entries[0].isIntersecting && !loading){\n        setMakeRequest(m => !m)\n      }\n    })\n    if(joke) observer.current.observe(joke)\n  }, [loading])\n\n  useEffect(() => {\n      //get 10 random jokes()\n      setLoading(true)\n      getJokes().then(data => setJokes(prevJokes => {\n        setLoading(false)\n        return [...prevJokes, ...data]\n      }))\n  }, [makeRequest])\n\n\n  return (\n    <main className='container'>\n        <div className='App'>\n          <header className='title'>\n            <h1>Chuck Norris Jokes</h1>\n          </header>\n          {jokes.map((joke, index) =>{\n            if(jokes.length === index + 1){\n              return <div key={joke.id} ref={lastJokeRef}>\n                <Joke  {...joke}/>\n              </div>\n            } else{\n              return <div key={joke.id}>\n              <Joke  {...joke}/>\n            </div>\n            }\n          } \n          )}\n        </div>\n        {loading && <Loader\n            className='loader'\n            type='ThreeDots'\n            color='#808080'\n            height={100}\n            width={100}\n          />\n        }\n      </main>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}